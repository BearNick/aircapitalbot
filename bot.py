import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

from calculator import generate_financial_model, extract_metrics_from_results
from gpt_analyzer import analyze_model_with_gpt  # üß† GPT-–∞–Ω–∞–ª–∏–∑

API_TOKEN = ""

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞ ---
class Form(StatesGroup):
    project_type = State()
    region = State()
    investment = State()
    horizon = State()
    revenue_year1 = State()
    growth = State()
    fixed_costs = State()
    variable_costs = State()
    employees = State()
    avg_salary = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
storage = MemoryStorage()
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

# --- /start ---
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="IT/SaaS"),
        types.KeyboardButton(text="Marketplace"),
        types.KeyboardButton(text="–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
        types.KeyboardButton(text="–î—Ä—É–≥–æ–µ")
    )
    builder.adjust(2)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(Form.project_type)

@dp.message(Form.project_type)
async def get_project_type(message: Message, state: FSMContext):
    await state.update_data(project_type=message.text)
    await message.answer("üåç –í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫?")
    await state.set_state(Form.region)

@dp.message(Form.region)
async def get_region(message: Message, state: FSMContext):
    await state.update_data(region=message.text)
    await message.answer("üí∞ –°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–ª–æ–∂–∏—Ç—å (‚ÇΩ)?")
    await state.set_state(Form.investment)

@dp.message(Form.investment)
async def get_investment(message: Message, state: FSMContext):
    await state.update_data(investment=message.text)
    await message.answer("üìÜ –ù–∞ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Å—Ç—Ä–æ–∏–º –º–æ–¥–µ–ª—å?")
    await state.set_state(Form.horizon)

@dp.message(Form.horizon)
async def get_horizon(message: Message, state: FSMContext):
    await state.update_data(horizon=message.text)
    await message.answer("üìà –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞ –≤ 1-–π –≥–æ–¥ (‚ÇΩ)?")
    await state.set_state(Form.revenue_year1)

@dp.message(Form.revenue_year1)
async def get_revenue(message: Message, state: FSMContext):
    await state.update_data(revenue_year1=message.text)
    await message.answer("üìä –ì–æ–¥–æ–≤–æ–π —Ä–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ (%)?")
    await state.set_state(Form.growth)

@dp.message(Form.growth)
async def get_growth(message: Message, state: FSMContext):
    await state.update_data(growth=message.text)
    await message.answer("üí∏ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –º–µ—Å—è—Ü (‚ÇΩ)?")
    await state.set_state(Form.fixed_costs)

@dp.message(Form.fixed_costs)
async def get_fixed_costs(message: Message, state: FSMContext):
    await state.update_data(fixed_costs=message.text)
    await message.answer("üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (% –æ—Ç –≤—ã—Ä—É—á–∫–∏)?")
    await state.set_state(Form.variable_costs)

@dp.message(Form.variable_costs)
async def get_variable_costs(message: Message, state: FSMContext):
    await state.update_data(variable_costs=message.text)
    await message.answer("üë• –°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ?")
    await state.set_state(Form.employees)

@dp.message(Form.employees)
async def get_employees(message: Message, state: FSMContext):
    await state.update_data(employees=message.text)
    await message.answer("üßæ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –º–µ—Å—è—Ü (‚ÇΩ)?")
    await state.set_state(Form.avg_salary)

@dp.message(Form.avg_salary)
async def get_avg_salary(message: Message, state: FSMContext):
    await state.update_data(avg_salary=message.text)
    await message.answer("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –º–æ–¥–µ–ª—å...")

    data = await state.get_data()

    # üßÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    file_path, metrics = generate_financial_model(data, return_metrics=True)

    # üß† GPT-–∞–Ω–∞–ª–∏–∑
    analysis = analysis = analyze_model_with_gpt(data, metrics)
    await message.answer(f"<b>üìã GPT-–∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏:</b>\n\n{analysis}")

    # üìé Excel-—Ñ–∞–π–ª
    await message.answer_document(types.FSInputFile(file_path), caption="üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞:")
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
