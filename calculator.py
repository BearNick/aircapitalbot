# –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª calculator.py —Å–æ —Å—Ç–∏–ª—è–º–∏, —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —á–∏—Å–µ–ª –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º

import pandas as pd
import numpy as np
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side, NamedStyle
from openpyxl.utils.dataframe import dataframe_to_rows
import os
from datetime import datetime

def generate_financial_model(data: dict, output_dir="output", return_metrics=False):
    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    years = int(data["horizon"])
    revenue_year1 = float(str(data["revenue_year1"]).replace(" ", "").replace(",", ""))
    growth_rate = float(str(data["growth"]).replace(",", ".")) / 100
    investment = float(str(data["investment"]).replace(" ", "").replace(",", ""))
    fixed_costs_monthly = float(str(data["fixed_costs"]).replace(" ", "").replace(",", ""))
    variable_costs_pct = float(str(data["variable_costs"]).replace(" ", "").replace(",", "")) / 100
    employees = int(data["employees"])
    avg_salary = float(str(data["avg_salary"]).replace(" ", "").replace(",", ""))

    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    tax_rate = 0.20
    discount_rate = 0.12
    salary_costs = avg_salary * employees * 12

    results = []
    cash_flows = []
    cumulative_cash_flow = 0

    for year in range(1, years + 1):
        revenue = revenue_year1 * ((1 + growth_rate) ** (year - 1))
        variable_costs = revenue * variable_costs_pct
        fixed_costs = fixed_costs_monthly * 12
        total_operating_expenses = variable_costs + fixed_costs + salary_costs
        ebitda = revenue - total_operating_expenses
        tax = tax_rate * ebitda if ebitda > 0 else 0
        net_income = ebitda - tax
        discounted_cash_flow = net_income / ((1 + discount_rate) ** year)
        cumulative_cash_flow += net_income

        results.append({
            "–ì–æ–¥": year,
            "–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)": round(revenue),
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (‚ÇΩ)": round(variable_costs),
            "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (‚ÇΩ)": round(fixed_costs),
            "–§–û–¢ (‚ÇΩ)": round(salary_costs),
            "EBITDA (‚ÇΩ)": round(ebitda),
            "–ù–∞–ª–æ–≥ (‚ÇΩ)": round(tax),
            "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (‚ÇΩ)": round(net_income),
            "DCF (‚ÇΩ)": round(discounted_cash_flow),
            "–ö—É–º. –ø—Ä–∏–±—ã–ª—å (‚ÇΩ)": round(cumulative_cash_flow)
        })

        cash_flows.append(net_income)

    df_financials = pd.DataFrame(results)

    # –ú–µ—Ç—Ä–∏–∫–∏
    npv = sum([cf / ((1 + discount_rate) ** (i + 1)) for i, cf in enumerate(cash_flows)])
    try:
        irr = np.irr([-investment] + cash_flows)
        irr_value = round(irr * 100, 2)
    except:
        irr_value = "N/A"
    payback_year = next((i + 1 for i, s in enumerate(np.cumsum(cash_flows)) if s >= investment), "–ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞")

    # Excel —Ñ–∞–π–ª
    os.makedirs(output_dir, exist_ok=True)
    now = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"financial_model_{now}.xlsx"
    filepath = os.path.join(output_dir, filename)
    wb = Workbook()

    # –°—Ç–∏–ª—å
    bold_center = NamedStyle(name="bold_center")
    bold_center.font = Font(bold=True)
    bold_center.alignment = Alignment(horizontal="center")
    border = Border(left=Side(style='thin'), right=Side(style='thin'),
                    top=Side(style='thin'), bottom=Side(style='thin'))

    def apply_styles(ws):
        for row in ws.iter_rows():
            for cell in row:
                cell.alignment = Alignment(horizontal="left", vertical="center")
                cell.font = Font(name="Calibri", size=11)
                cell.border = border

    # Summary
    summary = wb.active
    summary.title = "Summary"
    summary.append(["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    summary_data = [
        ("–û–±—â–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{int(investment):,} ‚ÇΩ"),
        ("NPV", f"{int(npv):,} ‚ÇΩ"),
        ("IRR", f"{irr_value} %"),
        ("–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏", f"{payback_year} –ª–µ—Ç"),
        ("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", f"{years} –ª–µ—Ç"),
        ("–°—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", f"{discount_rate * 100:.1f} %"),
        ("–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", f"{tax_rate * 100:.1f} %")
    ]
    for row in summary_data:
        summary.append(row)
    apply_styles(summary)

    # Assumptions
    assumptions = wb.create_sheet("Assumptions")
    assumptions.append(["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    assumptions_data = [
        ("–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞", data.get("project_type", "")),
        ("–†–µ–≥–∏–æ–Ω", data.get("region", "")),
        ("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", f"{int(investment):,} ‚ÇΩ"),
        ("–í—ã—Ä—É—á–∫–∞ –≤ 1-–π –≥–æ–¥", f"{int(revenue_year1):,} ‚ÇΩ"),
        ("–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏", f"{growth_rate * 100:.1f} %"),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{variable_costs_pct * 100:.1f} % –æ—Ç –≤—ã—Ä—É—á–∫–∏"),
        ("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{int(fixed_costs_monthly):,} ‚ÇΩ –≤ –º–µ—Å—è—Ü"),
        ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", f"{employees} —á–µ–ª."),
        ("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"{int(avg_salary):,} ‚ÇΩ –≤ –º–µ—Å—è—Ü")
    ]
    for row in assumptions_data:
        assumptions.append(row)
    apply_styles(assumptions)

    # P&L
    pnl = wb.create_sheet("P&L")
    for r in dataframe_to_rows(df_financials, index=False, header=True):
        pnl.append(r)
    apply_styles(pnl)

    # Multiples
    multiples = wb.create_sheet("Multiples")
    revenue_total = df_financials["–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)"].sum()
    ebitda_total = df_financials["EBITDA (‚ÇΩ)"].sum()
    valuation = investment + npv

    multiples.append(["–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    multiples_data = [
        ("EV/Revenue", round(valuation / revenue_total, 2) if revenue_total else "N/A"),
        ("EV/EBITDA", round(valuation / ebitda_total, 2) if ebitda_total else "N/A")
    ]
    for row in multiples_data:
        multiples.append(row)
    apply_styles(multiples)

    # –°–ø—Ä–∞–≤–∫–∞
    info = wb.create_sheet("–°–ø—Ä–∞–≤–∫–∞")
    help_text = [
        ("EBITDA", "–ü—Ä–∏–±—ã–ª—å –¥–æ –≤—ã—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –Ω–∞–ª–æ–≥–æ–≤ –∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏"),
        ("NPV", "–ß–∏—Å—Ç–∞—è –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥—É—â–∏—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"),
        ("IRR", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ—Ä–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ‚Äî —Å—Ç–∞–≤–∫–∞, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π NPV = 0"),
        ("Payback", "–ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –æ–∫—É–ø–∞—é—Ç—Å—è"),
        ("DCF", "–î–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ ‚Äî —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å —É—á—ë—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ–Ω–µ–≥ –≤–æ –≤—Ä–µ–º–µ–Ω–∏"),
        ("EV/EBITDA", "–û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∫ –ø—Ä–∏–±—ã–ª–∏ –¥–æ –Ω–∞–ª–æ–≥–æ–≤ –∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏"),
        ("EV/Revenue", "–û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∫ –≤—ã—Ä—É—á–∫–µ")
    ]
    info.append(["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–û–ø–∏—Å–∞–Ω–∏–µ"])
    for row in help_text:
        info.append(row)
    apply_styles(info)

    wb.save(filepath)

    if return_metrics:
        metrics = {
            "NPV": round(npv, 2),
            "IRR": irr_value,
            "Payback": payback_year
        }
        return filepath, metrics
    else:
        return filepath
def extract_metrics_from_results(metrics: dict) -> str:
    return (
        f"üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"‚Ä¢ NPV: {metrics.get('NPV', '‚Äî')} ‚ÇΩ\n"
        f"‚Ä¢ IRR: {metrics.get('IRR', '‚Äî')} %\n"
        f"‚Ä¢ –°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: {metrics.get('Payback', '‚Äî')} –ª–µ—Ç"
    )
